O()表示算法的时间复杂度，O(1)表示常数阶复杂度，O(n)表示线性阶复杂度，O(n^2)表示平方阶复杂度，O(log2 n)
渐近时间复杂度：常数/线性关系/平方关系/对数关系

一般我们在分析算法时，使用最坏情况下的F(n)来评价算法效率，原因有如下两点：
1.如果知道了最坏情况，我们就可以保证算法在任何时候都不能比这个情况更坏了。
2.很多时候，算法运行发生最坏情况的概率还是很大的，如查找问题中待查元素不存在的情况。且在很多时候，平均情况的渐近时间复杂度和最坏情况的渐近时间复杂度是一个量级的。

时间复杂度区间的数学定义：
定义一：Θ(g(n))={f(n) | 如果存在正常数c1、c2和正整数n0，使得当n>=n0时，0<c1*g(n)<=f(n)<=c2*g(n)恒成立}
定义二：Ο(g(n))={f(n) | 如果存在正常数c和正整数n0，使得当n>=n0时，0<=f(n)<=c*g(n)恒成立}
定义三：Ω(g(n))={f(n) | 如果存在正常数c和正整数n0，使得当n>=n0时，0<=c*g(n)<=f(n)恒成立}

