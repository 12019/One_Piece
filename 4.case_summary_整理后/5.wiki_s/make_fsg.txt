1.工厂生产时在手机第一次开机后通常需要提前预置一些静态NV项(主要是RF静态NV)，以确保开机后校准综测以及信令测试等基本功能正常。QCOM平台针对此需求专门提供一个FSG分区，用于存储需要预置的NV项，所有的NV会被打包到一个tar包里面，然后放在FSG分区里面。
2.在第一次开机时系统会检查modemst1/st2分区是否为空，如果为空则会用FSG里面的NV项创建一个初始化的EFS，并填充到modemst1/st2分区中(FSG可以看做是一个golden-copy，modem-st1和st2中的内容是互相拷贝备份的关系)


【1】制作静态QCN文件
既然是要预置NV，那么预置的NV项从哪里来呢？由于预置的NV主要是RFNV，一种来源当然是RF同事直接修改好直接提供给我们，另外就是根据高通codebase原生的xml文件进行修改生成。
高通codebase原生的RF静态xml文件放在 modem_proc/rftarget_jolokia/msm8909/qcn/....../ 目录下面,且文件夹命名都与RFCard一致，所以选择我们使用的对应RFCard的文件夹就可以了。

进入对应的文件夹后，可见如下内容
1.不同频段的TX/RX的RFNV配置xml
2.一个masterfile xml文件包含所有支持的频段，可添加或删减

关键点1：在master file中修改需要的频段对应文件，具体的频段xml中修改具体射频NV.
关键点2：找到NvDefinition文件，QRCT工具使用时选择Generate QCN/xQCN from source.

接着使用QRCT的NV Tool工具加载MASTERFILE文件即可生成对应的QCN文件，源文件中你可以直接把需要的静态NV全部加到master file中来，不用再额外引用其他文件。

<NvSource>
	<NvItem id="10" subscriptionid="0" name="NV_PREF_MODE_I" mapping="direct" encoding="dec" index="0">0,31</NvItem>
	...
	<NvEfsItem fullpathname="/nv/item_files/mcfg/mcfg_autoselect_by_uim" name="/nv/item_files/mcfg/mcfg_autoselect_by_uim" mapping="direct" encoding="dec" index="0" useProvisioningStore ="true">7</NvEfsItem>
	...
</NvSource>

至此我们已经拿到了包含所有静态NV的QCN文件了。

【2】提取tar文件
如之前所说，FSG分区实际存储的是一个以EFS文件目录结构打包而成的一个tar包。而高通提供了一个专门的命令用于从手机中提取tar包，但是出于安全考虑，此命令Modem默认不支持，需要单独编译一个打开此后门的Modem镜像。

添加宏定义，编译modem镜像
modem_proc/build/ms/cust8909.xxx.prodq.h文件添加如下宏定义(xxx代表编译时输入的build variation，比如gen、genns、lwg等)，编译一个NON-HLOS.bin镜像。

#define FEATURE_EFS_ENABLE_FACTORY_IMAGE_SECURITY_HOLE

通过adb/fastboot将添加宏后的modem镜像刷入机器，同时将modemst1、modemst2、fsg这三个分区全部擦除，这样是为了确保提取的tar包尽量干净，只包含必要的NV项。
  flashboot flash modemst1 zero.bin
  flashboot flash modemst2 zero.bin
  flashboot flash fsg zero.bin

接着把之前制作的静态QCN文件通过QPST/QFIL工具还原到机器里。
刷入QCN后，我们还可以根据实际需求通过EFS Explorer手动导入或者删除一些EFS文件。(policyman的)

找到\modem_proc\core\storage\tools或\common\tools\sectools_fsg 目录下的perl脚本文件，利用此脚本生成tar包。
最后在windows命令行输入下面的命令开始从手机中导出一个tar包，文件名为fs_image.tar.gz。(需要宏控制已打开，QCN已还原)
  perl efsreadimage.pl -z

【3】签名tar文件并生成FSG

目前高通提供了两种工具用于签名及生成FSG镜像：QDST及sectools。这里可以根据实际情况进行选择，比如如果平台不需要打开secureboot功能，即用QDST；需要则使用sectools。
这两种工具都运行一些脚本及命令来签名生成最终的FSG。

  \\10.120.10.100\ckt_cd_share\SmartPhone\team\BSP\01_Groups\08_Modem\03_Material\MakeFSG

[[File: FSG_sign_tools.JPG]]

这里需要注意的是，在制作FSG过程中需要一个efs_image_meta.bin文件，这个文件请直接使用当前项目编译出来的，文件路径在modem_proc/build/ms/bin/8909.gen.prod/efs_image_meta.bin。

最终生成的FSG镜像的文件名是fs_image.tar.gz.mbn.img。


【注意事项】
【制作的FSG尽量只包含必需的NV项】
并且在提取tar包时最好将手机设置为offline模式，因为默认在online模式会触发手机搜网生成一些临时NV。
可以使用一个没有集成RF驱动且打开后门的Modem镜像，这样机手开机后RF驱动加载失败就会自动进入offline，不需要我们再手动去设置一下。
另外由于工厂生产的需要，软件会在开机后软件版本号等信息写入到NV里面，所以尽量使用没有集成这些功能的软件版本来制作FSG，否则会包含很多工厂信息的NV。

【FSG签名务必使用我们自己的签名】
使用高通默认的签名会存在很多问题，比如制作的FSG无法被正确解析，需要额外定义一些宏，这可能会导致PDC工具无法正常使用。
同时出于安全的考虑，也不应该使用高通默认或者高通文档中提供的签名key。所以通过工具生成自己的签名key，或者沿用以前项目中使用的key。
并且对于签名的key，工具和代码也需要保持一致，这样才能被验证通过，签名key修改的文件在modem_proc/core/storage/fs_tar/src/fs_signed_img_param.c。

  #ifndef FS_SIGNED_IMG_ROOT_HASH
    #define FS_SIGNED_IMG_ROOT_HASH \
     {0xa1, 0x69, 0x84, 0xe3, 0x97, 0xf7, 0xa1, 0x6a, \
      0x56, 0x49, 0x59, 0x7c, 0xb0, 0x78, 0x11, 0xe3, \
      0x0a, 0xa2, 0xfb, 0x1b, 0xa9, 0x51, 0xc3, 0x8c, \
      0xa4, 0x60, 0x53, 0xf4, 0xa5, 0x74, 0xdd, 0x7f}
  #endif
  
  #ifndef FS_SIGNED_IMG_MSM_HW_ID
    #define FS_SIGNED_IMG_MSM_HW_ID    0x009600E100000000
  #endif
  
  #ifndef FS_SIGNED_IMG_SOFTWARE_ID
    #define FS_SIGNED_IMG_SOFTWARE_ID  0x0000000000000000
  #endif

【制作完成的FSG需要完整刷机验证】
制作FSG的应该放入软件包中格式化刷机，验证所有更改的NV项是否都以及生效并且正确无误。
同时用于此次制作FSG的xml文件、QCN文件、提取的tar包以及最终生成的FSG镜像，都应该进行备份便于后续进行查找和回溯。

【升级问题】
EFS是加密存储在eMMC中的，并且secureboot熔丝和非熔丝的机器高通使用不同的加密key，如果将非熔丝的机器刷入熔丝的软件，由于熔丝后的key无法解密出eMMC中EFS，会导致所有的NV项丢失。
所以对于每一台机器，都需要提前备份好QCN再进行软件升级。


