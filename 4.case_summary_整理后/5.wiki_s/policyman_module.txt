== 写在一开始 ==
*Policy Manager(PM)是MMCP(Multimode Call Processor)的一个子模块，主要功能是modem配置策略文件的解析和应用。和MCFG模块(MBN)关联较深，设计目的和MBN相同，都是为了在不修改modem核心代码的前提下，在面对不同运营商时，可以自适应加载合适的配置参数。
*Policyman模块主要涉及两个关键配置文件，device_config和carrier_policy。配置文件可以直接加在HW MBN或SW MBN中，高通目前设计是将carrier_policy.xml配置在OEM MBN中的，随MBN自动选择功能去加载不同配置参数。
*Policy配置文件本身没有要求必须配置，即不做配置理论上也不会影响终端正常功能(一般在其他地方规避)。

*本篇wiki将会结合高通的参考模板文件和解析代码，对PM模块配置文件的编写格式进行介绍；其次，简要介绍一下PM模块的初始化和MCFG refresh触发的PM参数更新的流程。

== PM模块代码结构 ==
=== 1.概述 ===
*mmcp(multimode call processor)模块一共包含以下内容：
<pre>
 -- api		//面向其他模块的公共/特殊接口
 -- build	//mmcp模块编译脚本
 -- cust	//客制化自定义配置项 合集
 -- ecall	//紧急通话模块
 -- mmode	//multimode module(cm，coreapp，mmoc控制模块，qmi，sd)
 -- nas		//nas layer(cb，cnm，mbms，mn，MM，RAB m，REG，service，sm，tc)
 -- policyman	//modem策略控制配置模块
 -- variation	//mmcp模块验证
 -- wms		//短信，彩信等无线消息服务
</pre>

*在modem_proc/mmcp/policyman/.../目录下，包含了policyman模块编译脚本，高通预置的配置文件，以及负责加载/解析这些配置的源文件。
*Policyman模块主要影响多制式多模(mmode)终端设备在搜网，数据，通话等功能的策略选择，重要的配置文件预置在MBN中，最终加载到EFS的/policyman目录下，适用于各种实验室/专网测试或者面向多运营商产品的适配。

*设计目的&优点：
**不同网络环境下或设备状态下，让终端根据实际情况具有自适应的策略选择能力。
**对于OEM、ODM开发，基本只需要配置关键的xml表即可，维护简单。

=== 2.Policyman tag映射表 ===
*包含了3张标签映射表(分别对应condition，action，precond)，将配置文件中可能用到的"tags"和对应接口函数等信息一一对应起来。(一般carrier_policy文件也不会使用所有的标签)
<pre>
/.../modem_proc/mmcp/policyman/src/policyman_policies.c
STATIC mre_condition_map_element_t const  policyman_condition_map[] = {...};
STATIC mre_action_map_element_t const  policyman_action_map[] = {...};
STATIC mre_precond_map_element_t policyman_precond_map[] = {...};
</pre>

=== 3.Policyman 关键配置项 ===
*所有PM config item的定义都可以在以下源文件找到.
<pre>
mmcp/api/public/policyman.h
mmcp/api/public/sys.h
</pre>
*PM加载和解析涉及的主要配置项如下，以下是配置项的枚举定义。
<pre>
/.../policyman.h -- 关键配置项定义
typedef enum
{
  POLICYMAN_ITEM_INVALID                = 0,
  POLICYMAN_ITEM_DEVICE_CONFIGURATION   = 1,	//NV70266 device_mode + numbers of subs，单独配置在HW MBN中
  POLICYMAN_ITEM_RAT_CAPABILITY         = 2,	//NV10 pref_mode
  POLICYMAN_ITEM_RF_BANDS               = 3,	//G T L band_pref ...
  POLICYMAN_ITEM_SVC_MODE               = 4,	//NV849
  POLICYMAN_ITEM_UE_MODE                = 5,	//SRVCC or CSFB or ...? 终端无线解决方案
  POLICYMAN_ITEM_VOICE_DOMAIN_PREF      = 6,	//NV66048
  POLICYMAN_ITEM_RAT_ACQ_ORDER          = 7,	//rat_acq_order
  POLICYMAN_ITEM_CALL_MODE              = 8,	//voice-only or ...?
  POLICYMAN_ITEM_SCAN_OPTIMIZATION      = 9,
  POLICYMAN_ITEM_FREQ_LIST              = 10,
} policyman_item_id_t;
</pre>
*Policyman中已经定义的关键配置项(以上"policyman_item_id_t"中的10个配置项)，代码中也分别有对应的枚举定义，下面只列举"POLICYMAN_ITEM_UE_MODE"一项，其余请自行参考源文件。
<pre>
typedef enum
{
  SYS_UE_MODE_NONE = -1,
  /* Ue Mode None - INTERNAL USE */

  SYS_UE_MODE_NORMAL,
  /* NORMAL is UE Mode used when UE is in legacy behavior.
   */

  SYS_UE_MODE_SGLTE,
  /* SGLTE: mode for simultaneous voice and data. UE can function in either
   * single stack or dual-stack.
   */

  SYS_UE_MODE_CSFB,
  /* CSFB: mode for circuit-switched fallback.
   */

  SYS_UE_MODE_CSFB_ONLY,
  /* CSFB_ONLY: This is CSFB mode, and UE is not allowed to move to SV_DATA.
   */

  SYS_UE_MODE_SGLTE_ONLY,
  /* SGLTE_ONLY: this is used only for testing. It is SGLTE mode and UE
   * will not move out of this mode.
   */

  SYS_UE_MODE_SVLTE,
  /* SVLTE: mode for simultaneous voice and data. UE can function in either
   * single stack or dual-stack.
   */

  SYS_UE_MODE_SVLTE_ONLY,
  /* SVLTE_ONLY: this is used only for testing. It is SVLTE mode and UE
   * will not move out of this mode.
   */

  SYS_UE_MODE_1XSRLTE_CSFB_PREFERRED,
  /*  SYS_UE_MODE_1XSRLTE_CSFB_PREFERRED: Attempt to connect as CSFB, but fallback
   *  to 1XSRLTE if CSFB is not supported on the network.
   */

  SYS_UE_MODE_GSMSRLTE_CSFB_PREFERRED,
  /*  SYS_UE_MODE_GSMSRLTE_CSFB_PREFERRED: Attempt to connect as CSFB, but fallback
   *  to GSMSRLTE if CSFB is not supported on the network.
   */

  SYS_UE_MODE_GSMSRLTE_ONLY,
  /* GSMSRLTE_ONLY: this is used only for testing. It is GSMSRLTE mode and UE
   * will not move out of this mode.
   */

  SYS_UE_MODE_1XSRLTE_ONLY
  /* 1XSRLTE_ONLY: this is used only for testing. It is 1XSRLTE mode and UE
   * will not move out of this mode.
   */
} sys_ue_mode_e_type;
</pre>

=== 4.PM各配置项的关联接口 ===
*在\modem_proc\mmcp\policyman\src\ 目录下，每一种配置项都对应有policyman_xxx.c的源文件，打开可以发现每一个源文件中都是关于这一个配置项的各种接口函数。
[[File:Policyman xxx folder.PNG]]

=== 5.MRE engine ===
*PM模块中实际负责解析xml配置文件的部分。
[[File:Policyman mre.PNG]]

== PolicyManager策略配置文件 ==
*PM是一个以配置参数为中心的模块，所有的配置都会加载到efs中去，因此整个模块都主要是靠着配置项而驱动起来的。
*在MCFG模块中，当设备网络状态变化，或者是SIM卡交换后，MBN出现变化/刷新后，然后EFS目录下的policyman配置文件都会根据实际情况清除/更新/重加载。
*我们在开发时关注的是device_config.xml，carrier_policy.xml两个配置文件，前者一般放在HW-MBN中，包含设备基础的配置信息(支持subs，slots，单待还是双待，支持的网络模式等等)；后者放在SW-MBN中，主要包含两大部分，一是详细的初始化配置，在机器启动阶段被加载进来，二是特殊情况下的policy-rule，如果carrier_policy.xml文件本身没有配置，则默认按照硬件设备本身来判断终端支持能力。

=== 1.device_config模板 ===
*以下是从代码中找的一个原始配置文件，不针对某个具体的运营商或地区，直接将这个device_config.xml配置在HW MBN中，作为终端的基础配置之一。
<pre>
<?xml version="1.0" encoding="UTF-8"?>

<!-- Device configuration file for single sim CHGWLT config 
$Header: //commercial/MPSS.JO.2.0.c1/Main/modem_proc/mmcp/policyman/configurations/DevConfig/SS/device_config.xml#1 $
--> 
<policy name        = "device configuration"
        changelist  = "$Change: 10947424 $" 
        enabled     = "true"
        schema_ver  = "1"
        policy_ver  = "2025.1.1"
>
<!-- 设定对应卡槽的RAT支持能力，和NV70266的device_mode(SS，DSDS，DSDA，Triple-STS)类似-->
  <initial>
    <actions>   
      <device_configuration num_sims = "1" max_active = "1">
        <config primary="G W L T" />
      </device_configuration>
    </actions>
  </initial>

</policy>
</pre>

=== 2.carrier_policy模板 ===
*carrier_policy主要分为"initial初始化配置"和"rules特殊规则"两部分，前者是必需的，后者若无实际需求可为空。
<pre>
<?xml version="1.0" encoding="UTF-8"?>
<!-- name用于区分policy用途，enable属性值表明是否允许PM解析使用，后面的ver标识版本，版本号无特殊要求 -->
<policy name="rat capability" enabled="true" schema_ver="1" policy_ver="1">
	<!-- initial部分是PM在boot阶段的初始化加载项，不可缺少 -->
	<initial>
		<actions>
		<!-- Initial actions to take when policy is initialized. -->
		</actions>
	</initial>
	
	<!-- specific policy rule 特殊"规则/策略"，这一部分可以为空-->
	<!-- rules-templete 1 -->
        <rule precond="NONE">
		<conditions>
		<!-- Conditions under which this rule is to be followed. -->
		</conditions>
		<actions>
		<!-- Actions to carry out if all conditions are true. -->
		</actions>
	</rule>
	<!-- More rules can follow. -->


	<!-- rules-templete 2 -->
	<if precond="NONE">
		<cond>
		<!-- Conditions under which this rule is to be followed. -->
		</cond>
		<then>
		<!-- Actions to carry out if all conditions are true. -->
		</then>
		<else>
		<!-- Actions to carry out if all conditions are false. -->
		</else>
	</if>
        <!-- More rules can follow. -->

</policy>
</pre>

=== 3.carrier_policy之"Policyman-title" ===
*配置文件的标题区域部分一般都是直接使用高通默认即可，包含表名，版本号等等信息，取值(enabled属性除外)对后续的配置策略判断无影响。
<pre>
<?xml version="1.0" encoding="UTF-8"?>
<!-- name用于区分policy用途，enable属性值表明是否允许PM解析使用，后面的ver标识版本-->
<policy name="rat capability" enabled="true" schema_ver="1" policy_ver="1">
</pre>

*在mre_policy_execute()中会对enabled属性值是否为true进行判断，若值为false会直接返回解析失败。
<pre>
...
  if (!MRE_POLICY_ENABLED(pPolicy))
  {
    MRE_MSG_ERROR_0("Policy not enabled due to parse/initialization failure");
    goto Done;
  }
...
</pre>

=== 4.carrier_policy之"Policyman-item" ===
*对于具体的每个配置项/TAG，以下只提出一种常见模板格式，仅做参考。
*对于已经在NV配置过的参数，终端一般会根据实际情况，将NV参数和PM配置参数两者求一个集。
----
*"rat_capability"，表示终端支持的无线接入技术能力。
*USER rat_capability会随NV10设置或上层下发pref_mode而变化，CM最终会将PM配置参数和NV参数求一个交集(intersecting/逻辑与运算)，得到最终的rat_capability。
<pre>
<rat_capability base="none">
	<include> CDMA HDR GSM WCDMA LTE </include>
</rat_capability>
</pre>
----
*"rf_bands"，设定允许扫描的无线频段，如果这里设置多项rf_bands后，并用rf_bands_list包裹起来以后，可以在后续的rule判断中直接调用。
*无线频段偏好设置，上层可以通过"QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE"修改，modem可以直接通过NV控制(NV441，946，2954，65633，67311，73680...)，最终由CM模块，将PM参数和用户频段偏好参数计算(intersecting/逻辑与运算)出一个交集。
<pre>
<rf_bands_list name = "xxxxxx">
	<gw_bands base = "hardware" />
	<lte_bands base = "none">
		<include> 0 2 25 37 38 39 40 </include>
	</lte_bands>
	<tds_bands base = "hardware" />
</rf_bands_list>
</pre>
----
*"svc_mode"，此TAG标识目标网络的注册状态(full，limited)。
*终端的Acquisition mode(接入模式)由svc_mode, net_sel_mode_pref，和卡状态三方面决定，其中搜网模式(net_sel_mode)可以通过NV849控制(auto or manual)或通过AP请求QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE修改net_sel_mode_pref。
<pre>
<svc_mode> FULL </svc_mode>
or
<svc_mode> LIMITED </svc_mode>
</pre>
----
*"voice_domain_pref"，设定终端在进行语音通话时，是PS域(IMS_PREF)优先还是CS域优先，IMS_PREF常用在支持VOLTE的机器，CSFB方案终端一般使用CS_ONLY。
*user voice_domain_pref参数可通过NV66048控制或QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE修改voice_domain_pref，CM最终会权衡PM参数和用户NV参数(mandatory=false时，NV参数优先级更高)得到最终结果。(如果mandatory=true，那么以PM参数优先)
<pre>
  <rule>
    <conditions>
      <serving_mcc_in> 310 311 312 313 314 315 316 330 </serving_mcc_in>
    </conditions>

    <actions>
      <voice_domain_pref mandatory="true"> IMS_PREF </voice_domain_pref>
    </actions>
  </rule>

  <rule>
    <conditions>
      <true/>
    </conditions>
    
    <actions>
      <voice_domain_pref mandatory="false"> CS_PREF </voice_domain_pref>
    </actions>
  </rule>
</pre>
----
*"rat_order"，表示终端期望的网络接入顺序(实际表现为搜网优先级更高，如果满足接入条件即选择驻留)，PM参数的优先级始终高于NV/EFS参数(实际上PM的rat接入优先级参数都是直接更新到/sd/rat_acq_order 的)。
*相同功能，对应NV67249(实际未使用)或者QMI下发修改acq_order和acq_order_len，modem侧直接修改rat_acq_order这个EFS文件即可。
<pre>
<rat_order> L W T G C H </rat_order>
</pre>
----
*"ca_band_combos"(非标item)，载波聚合的频段组合设定。
*User载波聚合频段组合，AP可以通过下发QMI_NAS_UPDATE_CA_BAND_COMBO_MSG设定，qmi_nasi_update_ca_band_combo()和qmi_nasi_get_ca_band_combo()作为接口，可以根据PLMN获取或更改CA信息。
*最终将PM CA配置和RF CA配置求交集得到最终的载波聚合配置结果。

<pre>
//在initial标签内给出PLMN和对应CA组合信息，像下面这样，当PLMN为46000时，CA组合是band41的带内聚合。
<ca_band_combos plmn="460-00" string="41AA-41A-0;" />
<ca_band_combos string="" />

//设定使用CA组合的PLMN合集，即PLMN为以下值时才会触发，在rules中可以直接对ca_combo_operators进行判断。
<plmn_list name = "ca_combo_operators">
  460-00 460-02 460-07 460-08
</plmn_list>
<ca_band_combos string="" />
</pre>

*也可以将ca_combo直接放在rule判断中，满足条件的情况下，根据string值确定频段组合；如果有多个频段组合，用分号隔开。
<pre>
<!-- 38CA-0: band38带内聚合 
     41AA: 双A的表示支持UL的CA，否则均只支持下行CA；
     BCS0: Bandwidth combination set；-->
<rule precond="SS">
  <conditions>
    <true />
  </conditions>
  <actions>
    <if>
      <cond> <serving_plmn_in list = "ca_combo_operators" /> </cond>
      <then> <ca_band_combos string="38CA-0;41AA-41A-0;41AA-41A-1;41CA-0;41CA-1;41AA-39A-0;41A-39AA-0;40CA-0;40CA-1;40AA-40A-0;39CA-0;38CC-0;41AA-41AA-0;41AA-41AA-1;41CC-0;41CC-1;41AA-39AA-0;40CC-0;40CC-1;40AA-40AA-0;39CC-0;" /> </then>
      <else>
       <ca_band_combos string="" />
      </else>
    </if>
  <continue />
  </actions>
</rule>		
</pre>
----
*大部分上述提到的关键配置项，都会加载到EFS的/policyman/ 目录下，机器重启后会根据最新配置重新加载，因此可以手动删除该目录后让其重新加载。
*还有一些关键参数这里没有再提及，更详细的部分可自行参考 /modem_proc/mmcp/policyman/configurations/ 目录下的各运营商的参考配置文件。
<pre>
device_configuration(定义在device_config.xml里)
ue_mode
call_mode
scan_optimization
freq_list
</pre>

=== 5.carrier_policy之"Policyman-rule" ===
*在rules设定中，按照上面已经给出的carrier_policy模板来设定"condition"和"action"即可，以下只提及几个关键点。
**precond取值固定(NONE，IMSI，SS，SIMTYPE，CDMASIMTYPE，LOCATION)，可以一个判断有多个值，中间用空格隔开，如果precond是NONE以外的取值，那么将会依赖于其他模块传来的events触发此条rules解析。
<pre>
//比如引用的这一条，rule precond=IMSI，即必须接收到UIM模块传来的IMSI参数才有机会触发此条rule，当接收到的IMSI归属联通网络时，设定终端的无线能力为GSM only。
  <rule precond="IMSI">
    <conditions>
      <imsi_plmn_in list="cu_imsi" />
    </conditions>
    <actions>
      <rat_capability base="none">
        <include> GSM </include>
      </rat_capability>
      <rf_bands base="hardware" />
      <svc_mode> FULL </svc_mode>
      <rat_order> G W L T C H </rat_order>
      <scan_optimization tgpp="disabled" tgpp2="disabled" />
    </actions>
  </rule>
</pre>
*如果某一条rule中出现<continue>，如果该条rule满足条件并执行后，终止这一次policy-rule的解析流程。
*定义方法一般即两种：rule--conditions--actions和if--cond--then--else的方法，第二种类似于if-else，详细的参考上文提到的配置模板。

== PM work-flow overview ==
=== PM module overview ===
*以下是我简单整理的PM模块特定场景下的流程图，仅作参考。
*实现细节请参考代码，我这里只提及最主要的流程。
<span style="color: red;">
===> 向右拉
</span>
[[File:Policy manager module.png]]

=== 1.Policyman初始化_流程概述 ===
*PM task会被分配4K的栈空间，带起来一个名为"policyman"的线程，线程入口是"policyman_task()"。
*高通codebase 8909/8917对比8976在PM模块接口函数变化很大，下文中提到的接口均已8909代码为例。
<pre>
policyman_task()
	policyman_init_after_start()	//获取当前任务的任务控制块TCB，在信号量集中设定watchdog的信号量
	policyman_signalset_init()	//信号量集初始化，clear all，signalset本身就只是一个bitmask
	policyman_signalset_add()	//向信号量集中添加多个子集，位或运算后得到新的信号量集
	
	policyman_thread_id = xxx	//获取全局静态变量 线程id，防止死锁(...)
	policyman_sigpool_init()	//初始化signal pool(max size=32)
	
	policyman_tech_init()		//tech_info初始化
	policyman_device_config_init()	//终端配置信息初始化，num_sim = 0 / maxActiveVoiceSubs = 0
	
	policyman_blocked_clients_init()
	policyman_rcinit()		//rcinit，可以开始处理事务了
	policyman_msgr_init()	        //消息路由模块初始化，初始化消息队列，创建消息路由客户机
	policyman_init()		//主要初始化部分，对PM模块内的各种参数初始化(device state，subs state，global state，rf参数，efs，trm_cap，PM policy等等...)
	policyman_blocked_clients_release()
	
	policyman_register_for_task_sync()	//分别检查CM和MMGSDI两个关联模块的状态
	policyman_register_for_uim_events()	//如果对应task已经处于ready状态，PM模块分别调用MMGSDI和CM提供的注册接口，选择为对应的EVENTS注册回调函数(一般参数/状态变化时会被调用)(这里没有特别指定注册的EVENTS，会在MMGSDI注册流程结束后调用)
		mmgsdi_client_id_and_evt_reg()	//MMGSDI模块的公共回调注册接口，这里目的是为"pm_mmgsdi_reg_status_cb"注册
	policyman_register_for_cm_events()	//同上，还分别会为cm phone events，cm ss events，cm call events注册回调
		......

	policyman_register_for_mcfg_refresh()	//为mcfg refresh注册回调函数(当MCFG参数发生更新时用于提示)
</pre>
*至此PM task的初始化部分就已经完成，后续就只有一个main loop，当有信号量变化时做出相应的后续处理(喂狗，处理命令，处理消息，uim/cm模块传来的events)。
[[File:Policyman init log.PNG]]
*这里补充一下关于回调的逻辑流程，PM自行调用其他模块提供的接口注册，其实就是把PM模块在特定情况下(接收到特定EVENTS时)本身想做的事(一个新的处理函数指针，即回调函数指针)告知其他模块，callback只是作为一个中间层的API，最终的处理操作，一般是放在回调函数调用的处理函数中的。

=== 2.Policyman初始化_policy部分初始化 ===
*PM初始化阶段中涉及的policy参数加载/打印流程如下。
<pre>
policyman_init()	//只列出policy相关接口，其他省略
	......
	policyman_policies_init()		//检查初始化标志位，初始化namespace_info和policysuspend/resume框架? 初始化三个policy集(mre_set_new)，分别用于存放不同等级的策略信息
        policyman_policy_load_global()		//加载global policy，加载三张映射表(condition，action，precondition)
        policyman_policies_per_subs_init()	//按照subs加载policy，和加载global policy流程相似

	(void)policyman_cfgitem_update_items()	//按照最新配置表更新PM配置参数，修改过的item项都会被后续打印出来，参考之前sub加载的部分流程
		handle_item_update()
		(...)
	POLICYMAN_MSG_HIGH_0("---------- Initial database after initialization")
	policyman_cfgitem_display_all()		//打印出策略参数
	......
</pre>

=== 3.MCFG refresh触发Policy更新 ===
*上面给出的流程图是MCFG发生更新时(换卡引起MBN切换)触发的PM策略更新流程，从代码流程上来看，PM策略初始化加载policy部分后面很大一部分也和上述流程图类似，只是在中间插入了一段MCFG refresh的流程。
*为什么这里着重讲MCFG refresh触发的PM更新，是因为一般终端正常开机以后，MCFG初始化加载MBN过程中都会触发MCFG refresh，由此再触发PM参数更新，基本可以看做是必现流程。
<pre>
policyman_register_for_mcfg_refresh()		//调用"mcfg_refresh_register()"注册接口为MCFG更新事件注册回调函数"policyman_mcfg_refresh_cb"
policyman_mcfg_refresh_cb()			//回调函数 --> "received mcfg sim refresh for sim/slot %d"
policyman_execute_process_mcfg_refresh_evt()	//由回调函数发出后续处理的命令，调用此接口处理MCFG更新事件
	--> policyman_suspend_by_client(); --> "policyman suspended by client %d; %d clients have suspended"	//因为处理mcfg refresh事件，更新policyman DB，PM变为挂起状态
*	--> policyman_state_enter_crit_section();
	--> policyman_per_subs_deinit(subs);    // Clear out cfgitem and per-subs state information
	
	--> policyman_state_get_state();
		--> policyman_state_get_cm_ph_state(pState, subs);    //调用接口重新获取pstate和pCMPHinfo
		
	--> policyman_cmph_nv_init(&pCmPhInfo, subs);                 //几个NV的重新读取
	--> policyman_fullrat_config_init_per_subs();                 //fullrat_config各属性值初始赋值
	--> policyman_device_config_reset_max_active_data();          //device_config
		--> policyman_policies_per_subs_init(pState, pItemSet, subs);    //policy未初始化情况下调用policyman_policy_load_subs()加载对应的policy文件
	        --> policyman_cfgitem_ensure_items_per_subs(pItemSet, subs);
			"========== Ensure subs database items"
			policyman_cfgitems_iterate() -->              //迭代的将各item的关键信息读取赋值，如果为空就赋默认值
				STATIC policyman_config_info_t  policyman_cfg_info[]  //PM config info database
				ensure_item_per_subs() ---> ...
					ensure_item() --> //调用policyman_cfg_info表中的对应item的policyman_xxx_get_default()接口获取默认值
					(...)
	--> policyman_set_policy_initialized(TRUE);       //g_policy_is_initialized初始化标志位置1
*	--> policyman_state_leave_crit_section();
	--> mcfg_refresh_done()		                  //在pm模块更新完items，设置标志位后，调用此函数告知MCFG，更新已完成 / "Refresh done notification sent to MCFG"
	--> policyman_resume_after_refresh()              //调用policyman_resume_internal(...)
		--> policyman_resume_internal() --> "policyman resumed by client %d"
				--> policyman_policies_run_policy_check() -->        //解析部分的判断(解析顺序： device_config.xml --> carrier_policy.xml)
				(...)
	--> policyman_dbupdate_enter_idle_state(); -->    //db更新状态置为idle状态
	--> policyman_cfgitem_update_device_config_for_force_notification(pItemSet); //当前没有devices_config这个item情况下，获取当前配置并添加，强制更新itemset
	--> policyman_cfgitem_update_items(pItemSet, NULL); --> (...) -->"Notifying clients of changes to %d items, sequence #%d" //提醒对应模块要更新啦，修改过的item项都会被后续打印出来，参考之前初始化加载的部分流程
	
	--> REF_CNT_OBJ_RELEASE_IF(pItemSet); //释放内存	
</pre>
=== 4.MCFG refresh_policy-check flow ===
*Policyman resume以后，触发policy检查，流程图里只列举了从MCFG refresh事件和卡状态更新两个地方触发"policy-check"的过程，还有其他类似情况(CM events，thermal状态变化...)也会触发policy-check。
<pre>
(...) -->
//policyman_policies.c
policyman_policies_run_policy_check()	//对xml配置文件进行检查
	--> ctx.pState    = pState;
	    ctx.pItemSet  = pItemSet;
	    ctx.asubs_id  = SYS_MODEM_AS_ID_NONE;

	--> iterCtx.pCtx    = &ctx;
	    iterCtx.pfn     = policyman_policy_run;     //policy-check
		
	--> mre_set_iterate(g_pPolicySet, policyman_policy_set_iterate, &iterCtx);
		--> policyman_policy_set_iterate(xxx, &iterCtx)
			--> mre_set_iterate(pPolicySet, pIterCtx->pfn, pIterCtx->pCtx);     //pIterCtx->pfn == policyman_policy_run
				--> policyman_policy_run(xxx, pIterCtx->pCtx)
				
	--> policyman_fullrat_config_evaluate() --> "Evaluating full RAT conditions on all subscriptions"
	
//policyman_policy.c
policyman_policy_run(*pElem, *pCtx)
	--> policyman_execute()      //获取policy版本号，解析xml文件
		--> "----------- Started executing policy version %d.%d.%d (%d) -----------"
		-->	mre_policy_execute(...)
		--> "----------- Finished executing policy %d.%d.%d (%d ms) -----------"
		
//mre_engine.c
mre_policy_execute()	//检查enable标志位，actionSET是否为空，判断一下precond是否匹配，最后执行所有actions。
	--> 如果enable标志位为0，"Policy not enabled due to parse/initialization failure"
	--> 如果actionset为空，"No actions for policy"
	--> mre_policy_check_if_preconds_are_met() "Policy preconditions: required 0x%x, met 0x%x"
	(...)
	--> mre_actionset_execute()

//mre_rules.c 
//mre_lang.c
mre_actionset_execute()
	--> mre_set_iterate((mre_set_t *) pActionSet, execute_action, pCtx)
		--> execute_action(xxx, pCtx)
			--> mre_execute_action(pAction, pCtx)	//每一个标签都对应着一个函数判断，从而执行对应action
</pre>

=== 5.MCFG refresh_policy-update flow ===
*具体的配置项更新过程，和初始化部分一样都是调用的"policyman_cfgitem_update_items()"接口。
<pre>
policyman_cfgitem_update_items()
	1.首先判断PM是否处于挂起状态，PM模块是否初始化
	2.--> handle_item_update(pItemSet, pNotifySet, pCmd, TRUE);
		更新mask信息...(客制化ratExcludeMask判断部分)
		--> mre_set_iterate(pItemSet, update_item, pNotifySet);
			--> update_item()
				--> policyman_cfgitem_update_item() 					//更新或添加某一个item到配置数据库，处理完后将对应item的is_changed标志位置true
		--> policyman_cfgitem_persist_and_notify() "No configuration items need updating" 
			--> policyman_cfgitem_notify_clients() 
				--> (...)
				--> 提醒参数更新 "Notifying clients of changes to %d items, sequence #%d"
				--> mre_set_iterate(pItemSet, policyman_cfgitem_display, NULL); 	//调用接口打印出所有有变化的item
				--> POLICYMAN_MSG_SEPARATOR(POLICYMAN_SEPARATOR_STAR);			//标志所有修改的的item项已经打印完毕
					--> policyman_util_msg_separator(which) --> mre_util_msg_separator() --> case MRE_SEPARATOR_STAR: "*********************************************" 
					
				//send MSIM message
				--> policyman_cfgitem_notify_msg_msim_new()       //为各item附着对应的消息handler，返回一个pMsg指针(从modem_mem_heap中分配空间)
				    msgr_send(pMsg, msgSize);
				    policyman_cfgitem_notify_msg_dtor();          //释放内存空间，attach关系
					
				--> policyman_cfgitem_send_diag_logs(pItemSet);
				    policyman_cfgitem_reset_changed();            //在所有item更新之后，将每个item的is_changed标志位置为false，在此之后可以接收新的修改
	(DB update状态变为idle，如果存在释放blocked client)	
	3.(后略...)
</pre>


=== 6.Log sniper-shot ===
*下面是MCFG更新触发PM参数更新的参考log，测试机插入的是联通卡，加载的是联通MBN中的配置文件。
<pre>
1."received mcfg sim refresh for sim/slot 0" --> 表明MCFG refresh事件已经发生，回调函数已经被调用。
2."policyman suspended"                      --> policyman被挂起，开始处理mcfg refresh事件。
3."Loaded policy file /xxx/xxx"              --> 加载carrier_policy配置文件。
4."{line 15} MCC list created with 2 items"  --> 从这里开始配置文件中的<initial>部分已经开始被解析并打印出来了。
5."========== Ensure subs database items"    --> 从这里开始，如果是<initial>里没有配置的关键参数，代码会自行加载默认值。
6."Refresh done notification sent to MCFG"   --> MCFG更新事件处理完毕，恢复policymanager

7.正在解析device_config.xml的<action>标签内容，我们这个配置文件中没有action操作所以这里没有policy被解析。
"----------- Started executing policy version %d.%d.%d (%d) -----------"
(...)
"----------- Finished executing policy %d.%d.%d (%d ms) -----------"
</pre>
[[File:Policyman load log CU1.PNG]]
<pre>
8.第二个execute policy即表示解析的是 carrier_policy.xml的<action>标签内容，可以从log明确看到，哪一行的rules/actions被解析。
9."Notifying clients of changes to 5 items, sequence #3"   --> 提示一共有5项参数被改动，接下来会将所有改动的item列举出来。
10."*********************************************"         --> 如果最后出现这样连续的一段星号log，标志所有修改的的item项已经打印完毕
</pre>
[[File:Policyman load log CU2.PNG]]
